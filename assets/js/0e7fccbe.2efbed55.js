"use strict";(globalThis.webpackChunkzipfood_docs=globalThis.webpackChunkzipfood_docs||[]).push([[6056],{3894:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"payment-methods","title":"Payment Method Module Documentation","description":"Tags: API Module Technical Payments","source":"@site/docs/payment-methods.md","sourceDirName":".","slug":"/payment-methods","permalink":"/docs/docs/payment-methods","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/payment-methods.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Orders Module Documentation","permalink":"/docs/docs/orders-module"},"next":{"title":"ZIPFood Pilot Onboarding Guide","permalink":"/docs/docs/pilot-onboarding"}}');var d=t(4848),i=t(8453);const r={},o="Payment Method Module Documentation",a={},l=[{value:"<strong>Purpose</strong>",id:"purpose",level:2},{value:"<strong>Controller Endpoints</strong>",id:"controller-endpoints",level:2},{value:"<strong>Data Model &amp; Schemas</strong>",id:"data-model--schemas",level:2},{value:"<strong>Main Service:\xa0<code>PaymentMethodsService</code></strong>",id:"main-servicepaymentmethodsservice",level:2},{value:"Responsibilities",id:"responsibilities",level:3},{value:"<strong>Extending/Customizing</strong>",id:"extendingcustomizing",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"payment-method-module-documentation",children:"Payment Method Module Documentation"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Tags:"})," ",(0,d.jsx)(n.code,{children:"API Module"})," ",(0,d.jsx)(n.code,{children:"Technical"})," ",(0,d.jsx)(n.code,{children:"Payments"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Location:"})," ",(0,d.jsx)(n.code,{children:"src/payment-methods/"})]}),"\n",(0,d.jsx)(n.h2,{id:"purpose",children:(0,d.jsx)(n.strong,{children:"Purpose"})}),"\n",(0,d.jsxs)(n.p,{children:["Manages user payment methods (cards, banks) via Stripe. Handles creation, retrieval, update, deletion, and default selection of payment methods. Supports payment intent creation and bank account verification. Primarily used by ",(0,d.jsx)(n.em,{children:"client"})," type accounts for making payments, and when creating payment intents for order payments."]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"controller-endpoints",children:(0,d.jsx)(n.strong,{children:"Controller Endpoints"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsxs)(n.em,{children:["All endpoints require JWT authentication (",(0,d.jsx)(n.code,{children:"@UseGuards(JwtAuthGuard)"}),")."]})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"GET /payment-methods"}),"\xa0\u2014 List user\u2019s payment methods"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"POST /payment-methods"}),"\xa0\u2014 Add a new payment method (card/bank)"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"POST /payment-methods/confirm-verification"}),"\xa0\u2014 Confirm bank account setup intent"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"PATCH /payment-methods/:id"}),"\xa0\u2014 Update payment method details"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"DELETE /payment-methods/:id"}),"\xa0\u2014 Delete a payment method"]}),"\n"]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"data-model--schemas",children:(0,d.jsx)(n.strong,{children:"Data Model & Schemas"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"PaymentMethodDto"}),": DTO for payment method responses."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"CreatePaymentMethodDto"}),": DTO for creating a payment method (",(0,d.jsx)(n.code,{children:"type"}),",\xa0",(0,d.jsx)(n.code,{children:"id"}),",\xa0",(0,d.jsx)(n.code,{children:"is_default"}),")."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"ConfirmSetupIntentDto"}),": DTO for confirming bank account setup intent."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"CreatePaymentIntentDto"}),": DTO for creating a payment intent (for payments)."]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"All DTOs are generated from Zod schemas and validated automatically."}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"main-servicepaymentmethodsservice",children:(0,d.jsxs)(n.strong,{children:["Main Service:\xa0",(0,d.jsx)(n.code,{children:"PaymentMethodsService"})]})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Location:"}),"\xa0",(0,d.jsx)(n.code,{children:"src/payment-methods/payment-methods.service.ts"})]}),"\n",(0,d.jsx)(n.h3,{id:"responsibilities",children:"Responsibilities"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Payment Method Management:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"paymentMethods(userId)"}),": List all payment methods for a user."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"createPaymentMethod(userId, type, id, is_default?, ip?, userAgent?)"}),": Add a new payment method (card or bank). For banks, creates and confirms a Stripe SetupIntent."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"confirmSetupIntent(userId, paymentMethodId, setupIntentId, is_default?)"}),": Confirms bank account verification and attaches it to the user."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"updatePaymentMethod(userId, paymentMethodId, data, is_default?)"}),": Update payment method details and optionally set as default."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"deletePaymentMethod(userId, paymentMethodId)"}),": Delete a payment method, ensuring at least one remains."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Default Payment Method Logic:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Ensures one payment method is always set as default."}),"\n",(0,d.jsx)(n.li,{children:"Updates Stripe customer\u2019s default payment method when needed."}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Payment Intent Creation:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"createPaymentIntent({ user_id, amount, currency, payment_method_id })"}),": Creates a Stripe PaymentIntent for charging the user."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Validation & Security:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"All operations validate user identity and Stripe customer linkage."}),"\n",(0,d.jsx)(n.li,{children:"Prevents deletion of the last payment method."}),"\n",(0,d.jsx)(n.li,{children:"Ensures only the user\u2019s own payment methods are managed."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"extendingcustomizing",children:(0,d.jsx)(n.strong,{children:"Extending/Customizing"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Add support for additional payment method types by extending service logic."}),"\n",(0,d.jsx)(n.li,{children:"Integrate with other modules for payment flows (e.g., orders, wallet)."}),"\n",(0,d.jsx)(n.li,{children:"Add admin endpoints for global payment method management if needed (with strict role checks)."}),"\n"]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Document Information"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Created by: Mark Serbol"}),"\n",(0,d.jsx)(n.li,{children:"Created time: July 27, 2025 9:48 AM"}),"\n",(0,d.jsx)(n.li,{children:"Category: API Module, Technical"}),"\n",(0,d.jsx)(n.li,{children:"Last edited by: Mark Serbol"}),"\n",(0,d.jsx)(n.li,{children:"Last updated time: July 27, 2025 12:38 PM"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const d={},i=s.createContext(d);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);